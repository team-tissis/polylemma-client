{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "faucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dealer",
          "type": "address"
        }
      ],
      "name": "setDealer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040526006805460ff60a01b191690553480156200001e57600080fd5b5060405180604001604052806009815260200168706f6c796c656d6d6160b81b81525060405180604001604052806003815260200162504c4d60e81b81525081600390816200006e91906200013d565b5060046200007d82826200013d565b5050600580546001600160a01b031916331790555062000209565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000c357607f821691505b602082108103620000e457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200013857600081815260208120601f850160051c81016020861015620001135750805b601f850160051c820191505b8181101562000134578281556001016200011f565b5050505b505050565b81516001600160401b0381111562000159576200015962000098565b62000171816200016a8454620000ae565b84620000ea565b602080601f831160018114620001a95760008415620001905750858301515b600019600386901b1c1916600185901b17855562000134565b600085815260208120601f198616915b82811015620001da57888601518255948401946001909101908401620001b9565b5085821015620001f95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610b1580620002196000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635791589711610097578063a0712d6811610066578063a0712d6814610206578063a457c2d714610219578063a9059cbb1461022c578063dd62ed3e1461023f57600080fd5b8063579158971461019757806370a08231146101aa57806395d89b41146101d35780639de2ee21146101db57600080fd5b80631e665f32116100d35780631e665f321461014d57806323b872dd14610162578063313ce56714610175578063395093511461018457600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610252565b60405161010f9190610946565b60405180910390f35b61012b6101263660046109b0565b6102e4565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61016061015b3660046109da565b6102fe565b005b61012b6101703660046109fc565b610384565b6040516012815260200161010f565b61012b6101923660046109b0565b6103a8565b6101606101a5366004610a38565b6103ca565b61013f6101b83660046109da565b6001600160a01b031660009081526020819052604090205490565b6101026103d7565b6006546101ee906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b610160610214366004610a38565b6103e6565b61012b6102273660046109b0565b610491565b61012b61023a3660046109b0565b61050c565b61013f61024d366004610a51565b61051a565b60606003805461026190610a84565b80601f016020809104026020016040519081016040528092919081815260200182805461028d90610a84565b80156102da5780601f106102af576101008083540402835291602001916102da565b820191906000526020600020905b8154815290600101906020018083116102bd57829003601f168201915b5050505050905090565b6000336102f2818585610545565b60019150505b92915050565b6005546001600160a01b0316331461035d5760405162461bcd60e51b815260206004820152601760248201527f73656e646572206973206e6f74206465706c6f7965722e00000000000000000060448201526064015b60405180910390fd5b600680546001600160a81b0319166001600160a01b0390921691909117600160a01b179055565b600033610392858285610669565b61039d8585856106e3565b506001949350505050565b6000336102f28185856103bb838361051a565b6103c59190610abe565b610545565b6103d43382610887565b50565b60606004805461026190610a84565b600654600160a01b900460ff1661043f5760405162461bcd60e51b815260206004820152601860248201527f6465616c657220686173206e6f74206265656e207365742e00000000000000006044820152606401610354565b6006546001600160a01b031633146103ca5760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91034b9903737ba103232b0b632b91760591b6044820152606401610354565b6000338161049f828661051a565b9050838110156104ff5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610354565b61039d8286868403610545565b6000336102f28185856106e3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105a75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610354565b6001600160a01b0382166106085760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610354565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610675848461051a565b905060001981146106dd57818110156106d05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610354565b6106dd8484848403610545565b50505050565b6001600160a01b0383166107475760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610354565b6001600160a01b0382166107a95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610354565b6001600160a01b038316600090815260208190526040902054818110156108215760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610354565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36106dd565b6001600160a01b0382166108dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610354565b80600260008282546108ef9190610abe565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b8181101561097357858101830151858201604001528201610957565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146109ab57600080fd5b919050565b600080604083850312156109c357600080fd5b6109cc83610994565b946020939093013593505050565b6000602082840312156109ec57600080fd5b6109f582610994565b9392505050565b600080600060608486031215610a1157600080fd5b610a1a84610994565b9250610a2860208501610994565b9150604084013590509250925092565b600060208284031215610a4a57600080fd5b5035919050565b60008060408385031215610a6457600080fd5b610a6d83610994565b9150610a7b60208401610994565b90509250929050565b600181811c90821680610a9857607f821691505b602082108103610ab857634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102f857634e487b7160e01b600052601160045260246000fdfea2646970667358221220d51c3d2c9137fcaebc2ea1b4065c64a74cb978460c38d6c5518da617f134810e64736f6c63430008110033",
    "sourceMap": "232:941:27:-:0;;;325:24;;;-1:-1:-1;;;;325:24:27;;;356:80;;;;;;;;;;1976:113:8;;;;;;;;;;;;;-1:-1:-1;;;1976:113:8;;;;;;;;;;;;;;;;-1:-1:-1;;;1976:113:8;;;2050:5;2042;:13;;;;;;:::i;:::-;-1:-1:-1;2065:7:8;:17;2075:7;2065;:17;:::i;:::-;-1:-1:-1;;406:10:27::1;:23:::0;;-1:-1:-1;;;;;;406:23:27::1;419:10;406:23;::::0;;-1:-1:-1;232:941:27;;14:127:48;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:48;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:48;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:48;;;2580:26;2531:89;-1:-1:-1;;1335:1:48;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:48;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:48;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:48;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:48:o;:::-;232:941:27;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80635791589711610097578063a0712d6811610066578063a0712d6814610206578063a457c2d714610219578063a9059cbb1461022c578063dd62ed3e1461023f57600080fd5b8063579158971461019757806370a08231146101aa57806395d89b41146101d35780639de2ee21146101db57600080fd5b80631e665f32116100d35780631e665f321461014d57806323b872dd14610162578063313ce56714610175578063395093511461018457600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610252565b60405161010f9190610946565b60405180910390f35b61012b6101263660046109b0565b6102e4565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61016061015b3660046109da565b6102fe565b005b61012b6101703660046109fc565b610384565b6040516012815260200161010f565b61012b6101923660046109b0565b6103a8565b6101606101a5366004610a38565b6103ca565b61013f6101b83660046109da565b6001600160a01b031660009081526020819052604090205490565b6101026103d7565b6006546101ee906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b610160610214366004610a38565b6103e6565b61012b6102273660046109b0565b610491565b61012b61023a3660046109b0565b61050c565b61013f61024d366004610a51565b61051a565b60606003805461026190610a84565b80601f016020809104026020016040519081016040528092919081815260200182805461028d90610a84565b80156102da5780601f106102af576101008083540402835291602001916102da565b820191906000526020600020905b8154815290600101906020018083116102bd57829003601f168201915b5050505050905090565b6000336102f2818585610545565b60019150505b92915050565b6005546001600160a01b0316331461035d5760405162461bcd60e51b815260206004820152601760248201527f73656e646572206973206e6f74206465706c6f7965722e00000000000000000060448201526064015b60405180910390fd5b600680546001600160a81b0319166001600160a01b0390921691909117600160a01b179055565b600033610392858285610669565b61039d8585856106e3565b506001949350505050565b6000336102f28185856103bb838361051a565b6103c59190610abe565b610545565b6103d43382610887565b50565b60606004805461026190610a84565b600654600160a01b900460ff1661043f5760405162461bcd60e51b815260206004820152601860248201527f6465616c657220686173206e6f74206265656e207365742e00000000000000006044820152606401610354565b6006546001600160a01b031633146103ca5760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91034b9903737ba103232b0b632b91760591b6044820152606401610354565b6000338161049f828661051a565b9050838110156104ff5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610354565b61039d8286868403610545565b6000336102f28185856106e3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105a75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610354565b6001600160a01b0382166106085760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610354565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610675848461051a565b905060001981146106dd57818110156106d05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610354565b6106dd8484848403610545565b50505050565b6001600160a01b0383166107475760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610354565b6001600160a01b0382166107a95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610354565b6001600160a01b038316600090815260208190526040902054818110156108215760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610354565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36106dd565b6001600160a01b0382166108dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610354565b80600260008282546108ef9190610abe565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b8181101561097357858101830151858201604001528201610957565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146109ab57600080fd5b919050565b600080604083850312156109c357600080fd5b6109cc83610994565b946020939093013593505050565b6000602082840312156109ec57600080fd5b6109f582610994565b9392505050565b600080600060608486031215610a1157600080fd5b610a1a84610994565b9250610a2860208501610994565b9150604084013590509250925092565b600060208284031215610a4a57600080fd5b5035919050565b60008060408385031215610a6457600080fd5b610a6d83610994565b9150610a7b60208401610994565b90509250929050565b600181811c90821680610a9857607f821691505b602082108103610ab857634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102f857634e487b7160e01b600052601160045260246000fdfea2646970667358221220d51c3d2c9137fcaebc2ea1b4065c64a74cb978460c38d6c5518da617f134810e64736f6c63430008110033",
    "sourceMap": "232:941:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98:8;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:48;;1162:22;1144:41;;1132:2;1117:18;4431:197:8;1004:187:48;3242:106:8;3329:12;;3242:106;;;1342:25:48;;;1330:2;1315:18;3242:106:8;1196:177:48;826:121:27;;;;;;:::i;:::-;;:::i;:::-;;5190:286:8;;;;;;:::i;:::-;;:::i;3091:91::-;;;3173:2;2044:36:48;;2032:2;2017:18;3091:91:8;1902:184:48;5871:234:8;;;;;;:::i;:::-;;:::i;1090:81:27:-;;;;;;:::i;:::-;;:::i;3406:125:8:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:8;3480:7;3506:18;;;;;;;;;;;;3406:125;2365:102;;;:::i;298:21:27:-;;;;;-1:-1:-1;;;;;298:21:27;;;;;;-1:-1:-1;;;;;2440:32:48;;;2422:51;;2410:2;2395:18;298:21:27;2276:203:48;730:90:27;;;;;;:::i;:::-;;:::i;6592:427:8:-;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;3974:149::-;;;;;;:::i;:::-;;:::i;2154:98::-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:19;4568:32:8;719:10:19;4584:7:8;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;826:121:27:-;668:10;;-1:-1:-1;;;;;668:10:27;654;:24;646:60;;;;-1:-1:-1;;;646:60:27;;3336:2:48;646:60:27;;;3318:21:48;3375:2;3355:18;;;3348:30;3414:25;3394:18;;;3387:53;3457:18;;646:60:27;;;;;;;;;896:6:::1;:16:::0;;-1:-1:-1;;;;;;922:18:27;-1:-1:-1;;;;;896:16:27;;::::1;922:18:::0;;;;-1:-1:-1;;;922:18:27::1;::::0;;826:121::o;5190:286:8:-;5317:4;719:10:19;5373:38:8;5389:4;719:10:19;5404:6:8;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:8;;5190:286;-1:-1:-1;;;;5190:286:8:o;5871:234::-;5959:4;719:10:19;6013:64:8;719:10:19;6029:7:8;6066:10;6038:25;719:10:19;6029:7:8;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;1090:81:27:-;1139:25;1145:10;1157:6;1139:5;:25::i;:::-;1090:81;:::o;2365:102:8:-;2421:13;2453:7;2446:14;;;;;:::i;730:90:27:-;482:11;;-1:-1:-1;;;482:11:27;;;;474:48;;;;-1:-1:-1;;;474:48:27;;3915:2:48;474:48:27;;;3897:21:48;3954:2;3934:18;;;3927:30;3993:26;3973:18;;;3966:54;4037:18;;474:48:27;3713:348:48;474:48:27;554:6;;-1:-1:-1;;;;;554:6:27;540:10;:20;532:54;;;;-1:-1:-1;;;532:54:27;;4268:2:48;532:54:27;;;4250:21:48;4307:2;4287:18;;;4280:30;-1:-1:-1;;;4326:18:48;;;4319:51;4387:18;;532:54:27;4066:345:48;6592:427:8;6685:4;719:10:19;6685:4:8;6766:25;719:10:19;6783:7:8;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:8;;4618:2:48;6801:85:8;;;4600:21:48;4657:2;4637:18;;;4630:30;4696:34;4676:18;;;4669:62;-1:-1:-1;;;4747:18:48;;;4740:35;4792:19;;6801:85:8;4416:401:48;6801:85:8;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:19;3860:28:8;719:10:19;3877:2:8;3881:6;3860:9;:28::i;3974:149::-;-1:-1:-1;;;;;4089:18:8;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149::o;10504:370::-;-1:-1:-1;;;;;10635:19:8;;10627:68;;;;-1:-1:-1;;;10627:68:8;;5024:2:48;10627:68:8;;;5006:21:48;5063:2;5043:18;;;5036:30;5102:34;5082:18;;;5075:62;-1:-1:-1;;;5153:18:48;;;5146:34;5197:19;;10627:68:8;4822:400:48;10627:68:8;-1:-1:-1;;;;;10713:21:8;;10705:68;;;;-1:-1:-1;;;10705:68:8;;5429:2:48;10705:68:8;;;5411:21:48;5468:2;5448:18;;;5441:30;5507:34;5487:18;;;5480:62;-1:-1:-1;;;5558:18:48;;;5551:32;5600:19;;10705:68:8;5227:398:48;10705:68:8;-1:-1:-1;;;;;10784:18:8;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1342:25:48;;;10835:32:8;;1315:18:48;10835:32:8;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;-1:-1:-1;;11351:16:8;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:8;;5832:2:48;11404:68:8;;;5814:21:48;5871:2;5851:18;;;5844:30;5910:31;5890:18;;;5883:59;5959:18;;11404:68:8;5630:353:48;11404:68:8;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:8;;7591:68;;;;-1:-1:-1;;;7591:68:8;;6190:2:48;7591:68:8;;;6172:21:48;6229:2;6209:18;;;6202:30;6268:34;6248:18;;;6241:62;-1:-1:-1;;;6319:18:48;;;6312:35;6364:19;;7591:68:8;5988:401:48;7591:68:8;-1:-1:-1;;;;;7677:16:8;;7669:64;;;;-1:-1:-1;;;7669:64:8;;6596:2:48;7669:64:8;;;6578:21:48;6635:2;6615:18;;;6608:30;6674:34;6654:18;;;6647:62;-1:-1:-1;;;6725:18:48;;;6718:33;6768:19;;7669:64:8;6394:399:48;7669:64:8;-1:-1:-1;;;;;7815:15:8;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:8;;7000:2:48;7840:72:8;;;6982:21:48;7039:2;7019:18;;;7012:30;7078:34;7058:18;;;7051:62;-1:-1:-1;;;7129:18:48;;;7122:36;7175:19;;7840:72:8;6798:402:48;7840:72:8;-1:-1:-1;;;;;7946:15:8;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;1342:25:48;;;8161:13:8;;8210:26;;1315:18:48;8210:26:8;;;;;;;8247:37;12180:121;8567:535;-1:-1:-1;;;;;8650:21:8;;8642:65;;;;-1:-1:-1;;;8642:65:8;;7407:2:48;8642:65:8;;;7389:21:48;7446:2;7426:18;;;7419:30;7485:33;7465:18;;;7458:61;7536:18;;8642:65:8;7205:355:48;8642:65:8;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:8;;:9;:18;;;;;;;;;;;:28;;;;;;8999:37;1342:25:48;;;8999:37:8;;1315:18:48;8999:37:8;;;;;;;8567:535;;:::o;14:548:48:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:48;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:48:o;1378:186::-;1437:6;1490:2;1478:9;1469:7;1465:23;1461:32;1458:52;;;1506:1;1503;1496:12;1458:52;1529:29;1548:9;1529:29;:::i;:::-;1519:39;1378:186;-1:-1:-1;;;1378:186:48:o;1569:328::-;1646:6;1654;1662;1715:2;1703:9;1694:7;1690:23;1686:32;1683:52;;;1731:1;1728;1721:12;1683:52;1754:29;1773:9;1754:29;:::i;:::-;1744:39;;1802:38;1836:2;1825:9;1821:18;1802:38;:::i;:::-;1792:48;;1887:2;1876:9;1872:18;1859:32;1849:42;;1569:328;;;;;:::o;2091:180::-;2150:6;2203:2;2191:9;2182:7;2178:23;2174:32;2171:52;;;2219:1;2216;2209:12;2171:52;-1:-1:-1;2242:23:48;;2091:180;-1:-1:-1;2091:180:48:o;2484:260::-;2552:6;2560;2613:2;2601:9;2592:7;2588:23;2584:32;2581:52;;;2629:1;2626;2619:12;2581:52;2652:29;2671:9;2652:29;:::i;:::-;2642:39;;2700:38;2734:2;2723:9;2719:18;2700:38;:::i;:::-;2690:48;;2484:260;;;;;:::o;2749:380::-;2828:1;2824:12;;;;2871;;;2892:61;;2946:4;2938:6;2934:17;2924:27;;2892:61;2999:2;2991:6;2988:14;2968:18;2965:38;2962:161;;3045:10;3040:3;3036:20;3033:1;3026:31;3080:4;3077:1;3070:15;3108:4;3105:1;3098:15;2962:161;;2749:380;;;:::o;3486:222::-;3551:9;;;3572:10;;;3569:133;;;3624:10;3619:3;3615:20;3612:1;3605:31;3659:4;3656:1;3649:15;3687:4;3684:1;3677:15",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "dealer()": "9de2ee21",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "faucet(uint256)": "57915897",
    "increaseAllowance(address,uint256)": "39509351",
    "mint(uint256)": "a0712d68",
    "name()": "06fdde03",
    "setDealer(address)": "1e665f32",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"faucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dealer\",\"type\":\"address\"}],\"name\":\"setDealer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"faucet(uint256)\":{\"notice\":\"FUNCTION FOR DEMO ///\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PLMCoin.sol\":\"PLMCoin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b394e20d57877a825c24c1841e219d6ab1e41decec060ea935422ac9b7a25f8a\",\"dweb:/ipfs/QmVTaGCMR4Gi9w1LUVVcjEJHrHF2qcr1avFkLtsLD6sEAr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/PLMCoin.sol\":{\"keccak256\":\"0x703740f4c2dc393a501c3bd53d6390ee1d4eec3c0e9ea358c63bd83a4dec9805\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06fc6719933907fca41f57cb49e7c47bcf9ddcc79571ece58b6caac5ece22632\",\"dweb:/ipfs/Qme2RdXrfkoraN8zYeZrBTdVorcn5jZoGBT6NDmSUSc8qn\"]},\"src/interfaces/IPLMCoin.sol\":{\"keccak256\":\"0x252defddcbcf9c8dd3ce082ba6addd946d2fae1b2455437605869bfb55977b69\",\"urls\":[\"bzz-raw://cc307bf226782fe29f1b4a90683a938bf32db9f834b861f5dc5526bbd0b4d983\",\"dweb:/ipfs/QmcmB8q2oQvXuR8Pa7Y25r3QMJdWiQBE9u81xQdTDkGGmA\"]},\"src/interfaces/IPLMData.sol\":{\"keccak256\":\"0x05ea0e81356327bb8fd44dc1c73546464c678604d2b686a9212c86826690a22e\",\"urls\":[\"bzz-raw://060e6084ff4e39990ba60e547135c707edc33fa8cfe0d0eefbbeb5b70952c2a4\",\"dweb:/ipfs/QmPiZ8633VwE1vh2pqFupz7ExYU8p4ZUKvJ6Zx39rqbGAH\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "dealer",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "faucet"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mint"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_dealer",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDealer"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "faucet(uint256)": {
            "notice": "FUNCTION FOR DEMO ///"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/PLMCoin.sol": "PLMCoin"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d",
        "urls": [
          "bzz-raw://b394e20d57877a825c24c1841e219d6ab1e41decec060ea935422ac9b7a25f8a",
          "dweb:/ipfs/QmVTaGCMR4Gi9w1LUVVcjEJHrHF2qcr1avFkLtsLD6sEAr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "src/PLMCoin.sol": {
        "keccak256": "0x703740f4c2dc393a501c3bd53d6390ee1d4eec3c0e9ea358c63bd83a4dec9805",
        "urls": [
          "bzz-raw://06fc6719933907fca41f57cb49e7c47bcf9ddcc79571ece58b6caac5ece22632",
          "dweb:/ipfs/Qme2RdXrfkoraN8zYeZrBTdVorcn5jZoGBT6NDmSUSc8qn"
        ],
        "license": "MIT"
      },
      "src/interfaces/IPLMCoin.sol": {
        "keccak256": "0x252defddcbcf9c8dd3ce082ba6addd946d2fae1b2455437605869bfb55977b69",
        "urls": [
          "bzz-raw://cc307bf226782fe29f1b4a90683a938bf32db9f834b861f5dc5526bbd0b4d983",
          "dweb:/ipfs/QmcmB8q2oQvXuR8Pa7Y25r3QMJdWiQBE9u81xQdTDkGGmA"
        ],
        "license": null
      },
      "src/interfaces/IPLMData.sol": {
        "keccak256": "0x05ea0e81356327bb8fd44dc1c73546464c678604d2b686a9212c86826690a22e",
        "urls": [
          "bzz-raw://060e6084ff4e39990ba60e547135c707edc33fa8cfe0d0eefbbeb5b70952c2a4",
          "dweb:/ipfs/QmPiZ8633VwE1vh2pqFupz7ExYU8p4ZUKvJ6Zx39rqbGAH"
        ],
        "license": null
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/PLMCoin.sol",
    "id": 28189,
    "exportedSymbols": {
      "ERC20": [
        23878
      ],
      "IPLMCoin": [
        31324
      ],
      "IPLMData": [
        31426
      ],
      "PLMCoin": [
        28188
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1142:27",
    "nodes": [
      {
        "id": 28085,
        "nodeType": "PragmaDirective",
        "src": "32:24:27",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 28087,
        "nodeType": "ImportDirective",
        "src": "58:67:27",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-contracts/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28189,
        "sourceUnit": 23879,
        "symbolAliases": [
          {
            "foreign": {
              "id": 28086,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 23878,
              "src": "66:5:27",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 28089,
        "nodeType": "ImportDirective",
        "src": "127:51:27",
        "nodes": [],
        "absolutePath": "src/interfaces/IPLMCoin.sol",
        "file": "./interfaces/IPLMCoin.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28189,
        "sourceUnit": 31325,
        "symbolAliases": [
          {
            "foreign": {
              "id": 28088,
              "name": "IPLMCoin",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 31324,
              "src": "135:8:27",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 28091,
        "nodeType": "ImportDirective",
        "src": "179:51:27",
        "nodes": [],
        "absolutePath": "src/interfaces/IPLMData.sol",
        "file": "./interfaces/IPLMData.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28189,
        "sourceUnit": 31427,
        "symbolAliases": [
          {
            "foreign": {
              "id": 28090,
              "name": "IPLMData",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 31426,
              "src": "187:8:27",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 28188,
        "nodeType": "ContractDefinition",
        "src": "232:941:27",
        "nodes": [
          {
            "id": 28097,
            "nodeType": "VariableDeclaration",
            "src": "274:18:27",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "polylemmer",
            "nameLocation": "282:10:27",
            "scope": 28188,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 28096,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "274:7:27",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 28099,
            "nodeType": "VariableDeclaration",
            "src": "298:21:27",
            "nodes": [],
            "constant": false,
            "functionSelector": "9de2ee21",
            "mutability": "mutable",
            "name": "dealer",
            "nameLocation": "313:6:27",
            "scope": 28188,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 28098,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "298:7:27",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 28102,
            "nodeType": "VariableDeclaration",
            "src": "325:24:27",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "DealerIsSet",
            "nameLocation": "330:11:27",
            "scope": 28188,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 28100,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "325:4:27",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 28101,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "344:5:27",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "internal"
          },
          {
            "id": 28115,
            "nodeType": "FunctionDefinition",
            "src": "356:80:27",
            "nodes": [],
            "body": {
              "id": 28114,
              "nodeType": "Block",
              "src": "396:40:27",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 28112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 28109,
                      "name": "polylemmer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28097,
                      "src": "406:10:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 28110,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "419:3:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 28111,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "423:6:27",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "419:10:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "406:23:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 28113,
                  "nodeType": "ExpressionStatement",
                  "src": "406:23:27"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "706f6c796c656d6d61",
                    "id": 28105,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "376:11:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_f46903bca5c8c4e977d79d3b52f6a356721dc8daf48432714f57f984375aaed8",
                      "typeString": "literal_string \"polylemma\""
                    },
                    "value": "polylemma"
                  },
                  {
                    "hexValue": "504c4d",
                    "id": 28106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "389:5:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_200f12e03a6d00d94aef31b411e1387d93b1dc8571dbf24d9cc761b21aa7bb4e",
                      "typeString": "literal_string \"PLM\""
                    },
                    "value": "PLM"
                  }
                ],
                "id": 28107,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 28104,
                  "name": "ERC20",
                  "nameLocations": [
                    "370:5:27"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 23878,
                  "src": "370:5:27"
                },
                "nodeType": "ModifierInvocation",
                "src": "370:25:27"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 28103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "367:2:27"
            },
            "returnParameters": {
              "id": 28108,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "396:0:27"
            },
            "scope": 28188,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 28132,
            "nodeType": "ModifierDefinition",
            "src": "442:162:27",
            "nodes": [],
            "body": {
              "id": 28131,
              "nodeType": "Block",
              "src": "464:140:27",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28118,
                        "name": "DealerIsSet",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28102,
                        "src": "482:11:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6465616c657220686173206e6f74206265656e207365742e",
                        "id": 28119,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "495:26:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f9eac3fc64528334fa687f2099971a295b178c81b1dea38ed61151b35a1f0ec4",
                          "typeString": "literal_string \"dealer has not been set.\""
                        },
                        "value": "dealer has not been set."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f9eac3fc64528334fa687f2099971a295b178c81b1dea38ed61151b35a1f0ec4",
                          "typeString": "literal_string \"dealer has not been set.\""
                        }
                      ],
                      "id": 28117,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "474:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 28120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "474:48:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28121,
                  "nodeType": "ExpressionStatement",
                  "src": "474:48:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 28126,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 28123,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "540:3:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 28124,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "544:6:27",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "540:10:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 28125,
                          "name": "dealer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28099,
                          "src": "554:6:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "540:20:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "73656e646572206973206e6f74206465616c65722e",
                        "id": 28127,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "562:23:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_68abe7a1ea227ad1ce5c365fd4d1c5467f009226b379335ec1fdce46af736321",
                          "typeString": "literal_string \"sender is not dealer.\""
                        },
                        "value": "sender is not dealer."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_68abe7a1ea227ad1ce5c365fd4d1c5467f009226b379335ec1fdce46af736321",
                          "typeString": "literal_string \"sender is not dealer.\""
                        }
                      ],
                      "id": 28122,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "532:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 28128,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "532:54:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28129,
                  "nodeType": "ExpressionStatement",
                  "src": "532:54:27"
                },
                {
                  "id": 28130,
                  "nodeType": "PlaceholderStatement",
                  "src": "596:1:27"
                }
              ]
            },
            "name": "onlyDealer",
            "nameLocation": "451:10:27",
            "parameters": {
              "id": 28116,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "461:2:27"
            },
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 28144,
            "nodeType": "ModifierDefinition",
            "src": "610:114:27",
            "nodes": [],
            "body": {
              "id": 28143,
              "nodeType": "Block",
              "src": "636:88:27",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 28138,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 28135,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "654:3:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 28136,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "658:6:27",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "654:10:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 28137,
                          "name": "polylemmer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28097,
                          "src": "668:10:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "654:24:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "73656e646572206973206e6f74206465706c6f7965722e",
                        "id": 28139,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "680:25:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_613bb8fb287326b69da0b953d259f2372e3c2721abe93974928408d137d8a274",
                          "typeString": "literal_string \"sender is not deployer.\""
                        },
                        "value": "sender is not deployer."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_613bb8fb287326b69da0b953d259f2372e3c2721abe93974928408d137d8a274",
                          "typeString": "literal_string \"sender is not deployer.\""
                        }
                      ],
                      "id": 28134,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "646:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 28140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "646:60:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28141,
                  "nodeType": "ExpressionStatement",
                  "src": "646:60:27"
                },
                {
                  "id": 28142,
                  "nodeType": "PlaceholderStatement",
                  "src": "716:1:27"
                }
              ]
            },
            "name": "onlyPolylemmer",
            "nameLocation": "619:14:27",
            "parameters": {
              "id": 28133,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "633:2:27"
            },
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 28158,
            "nodeType": "FunctionDefinition",
            "src": "730:90:27",
            "nodes": [],
            "body": {
              "id": 28157,
              "nodeType": "Block",
              "src": "778:42:27",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 28152,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "794:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 28153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "798:6:27",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "794:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 28154,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28146,
                        "src": "806:6:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 28151,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23695,
                      "src": "788:5:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 28155,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "788:25:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28156,
                  "nodeType": "ExpressionStatement",
                  "src": "788:25:27"
                }
              ]
            },
            "baseFunctions": [
              31312
            ],
            "functionSelector": "a0712d68",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 28149,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 28148,
                  "name": "onlyDealer",
                  "nameLocations": [
                    "767:10:27"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28132,
                  "src": "767:10:27"
                },
                "nodeType": "ModifierInvocation",
                "src": "767:10:27"
              }
            ],
            "name": "mint",
            "nameLocation": "739:4:27",
            "parameters": {
              "id": 28147,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28146,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "752:6:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 28158,
                  "src": "744:14:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28145,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "744:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "743:16:27"
            },
            "returnParameters": {
              "id": 28150,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "778:0:27"
            },
            "scope": 28188,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 28174,
            "nodeType": "FunctionDefinition",
            "src": "826:121:27",
            "nodes": [],
            "body": {
              "id": 28173,
              "nodeType": "Block",
              "src": "886:61:27",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 28167,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 28165,
                      "name": "dealer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28099,
                      "src": "896:6:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 28166,
                      "name": "_dealer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28160,
                      "src": "905:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "896:16:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 28168,
                  "nodeType": "ExpressionStatement",
                  "src": "896:16:27"
                },
                {
                  "expression": {
                    "id": 28171,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 28169,
                      "name": "DealerIsSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28102,
                      "src": "922:11:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 28170,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "936:4:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "922:18:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 28172,
                  "nodeType": "ExpressionStatement",
                  "src": "922:18:27"
                }
              ]
            },
            "baseFunctions": [
              31317
            ],
            "functionSelector": "1e665f32",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 28163,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 28162,
                  "name": "onlyPolylemmer",
                  "nameLocations": [
                    "871:14:27"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28144,
                  "src": "871:14:27"
                },
                "nodeType": "ModifierInvocation",
                "src": "871:14:27"
              }
            ],
            "name": "setDealer",
            "nameLocation": "835:9:27",
            "parameters": {
              "id": 28161,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28160,
                  "mutability": "mutable",
                  "name": "_dealer",
                  "nameLocation": "853:7:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 28174,
                  "src": "845:15:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28159,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "845:7:27",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "844:17:27"
            },
            "returnParameters": {
              "id": 28164,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "886:0:27"
            },
            "scope": 28188,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28187,
            "nodeType": "FunctionDefinition",
            "src": "1090:81:27",
            "nodes": [],
            "body": {
              "id": 28186,
              "nodeType": "Block",
              "src": "1129:42:27",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 28181,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1145:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 28182,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1149:6:27",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1145:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 28183,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28177,
                        "src": "1157:6:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 28180,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23695,
                      "src": "1139:5:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 28184,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1139:25:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28185,
                  "nodeType": "ExpressionStatement",
                  "src": "1139:25:27"
                }
              ]
            },
            "baseFunctions": [
              31323
            ],
            "documentation": {
              "id": 28175,
              "nodeType": "StructuredDocumentation",
              "src": "983:25:27",
              "text": "FUNCTION FOR DEMO ///"
            },
            "functionSelector": "57915897",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "faucet",
            "nameLocation": "1099:6:27",
            "parameters": {
              "id": 28178,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28177,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1114:6:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 28187,
                  "src": "1106:14:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28176,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1106:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1105:16:27"
            },
            "returnParameters": {
              "id": 28179,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1129:0:27"
            },
            "scope": 28188,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 28092,
              "name": "ERC20",
              "nameLocations": [
                "252:5:27"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 23878,
              "src": "252:5:27"
            },
            "id": 28093,
            "nodeType": "InheritanceSpecifier",
            "src": "252:5:27"
          },
          {
            "baseName": {
              "id": 28094,
              "name": "IPLMCoin",
              "nameLocations": [
                "259:8:27"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 31324,
              "src": "259:8:27"
            },
            "id": 28095,
            "nodeType": "InheritanceSpecifier",
            "src": "259:8:27"
          }
        ],
        "canonicalName": "PLMCoin",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          28188,
          31324,
          23878,
          23981,
          23956,
          25854
        ],
        "name": "PLMCoin",
        "nameLocation": "241:7:27",
        "scope": 28189,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 27
}